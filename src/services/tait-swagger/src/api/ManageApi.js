/**
 * Think About IT BC
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ThinkAboutItBc) {
      root.ThinkAboutItBc = {};
    }
    root.ThinkAboutItBc.ManageApi = factory(root.ThinkAboutItBc.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Manage service.
   * @module api/ManageApi
   * @version v1
   */

  /**
   * Constructs a new ManageApi. 
   * @alias module:api/ManageApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the manageChangePasswordGet operation.
     * @callback module:api/ManageApi~manageChangePasswordGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ManageApi~manageChangePasswordGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageChangePasswordGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/ChangePassword', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageChangePasswordPost operation.
     * @callback module:api/ManageApi~manageChangePasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.oldPassword 
     * @param {String} opts.newPassword 
     * @param {String} opts.confirmPassword 
     * @param {String} opts.statusMessage 
     * @param {module:api/ManageApi~manageChangePasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageChangePasswordPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'OldPassword': opts['oldPassword'],
        'NewPassword': opts['newPassword'],
        'ConfirmPassword': opts['confirmPassword'],
        'StatusMessage': opts['statusMessage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/ChangePassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageDisable2faPost operation.
     * @callback module:api/ManageApi~manageDisable2faPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ManageApi~manageDisable2faPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageDisable2faPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/Disable2fa', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageDisable2faWarningGet operation.
     * @callback module:api/ManageApi~manageDisable2faWarningGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ManageApi~manageDisable2faWarningGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageDisable2faWarningGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/Disable2faWarning', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageEnableAuthenticatorGet operation.
     * @callback module:api/ManageApi~manageEnableAuthenticatorGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ManageApi~manageEnableAuthenticatorGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageEnableAuthenticatorGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/EnableAuthenticator', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageEnableAuthenticatorPost operation.
     * @callback module:api/ManageApi~manageEnableAuthenticatorPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.code 
     * @param {String} opts.sharedKey 
     * @param {String} opts.authenticatorUri 
     * @param {module:api/ManageApi~manageEnableAuthenticatorPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageEnableAuthenticatorPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'Code': opts['code'],
        'SharedKey': opts['sharedKey'],
        'AuthenticatorUri': opts['authenticatorUri']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/EnableAuthenticator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageExternalLoginsGet operation.
     * @callback module:api/ManageApi~manageExternalLoginsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ManageApi~manageExternalLoginsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageExternalLoginsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/ExternalLogins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageGenerateRecoveryCodesGet operation.
     * @callback module:api/ManageApi~manageGenerateRecoveryCodesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ManageApi~manageGenerateRecoveryCodesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageGenerateRecoveryCodesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/GenerateRecoveryCodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageIndexGet operation.
     * @callback module:api/ManageApi~manageIndexGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ManageApi~manageIndexGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageIndexGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/Index', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageIndexPost operation.
     * @callback module:api/ManageApi~manageIndexPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.username 
     * @param {Boolean} opts.isEmailConfirmed 
     * @param {String} opts.email 
     * @param {String} opts.phoneNumber 
     * @param {String} opts.statusMessage 
     * @param {module:api/ManageApi~manageIndexPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageIndexPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'Username': opts['username'],
        'IsEmailConfirmed': opts['isEmailConfirmed'],
        'Email': opts['email'],
        'PhoneNumber': opts['phoneNumber'],
        'StatusMessage': opts['statusMessage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/Index', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageLinkLoginCallbackGet operation.
     * @callback module:api/ManageApi~manageLinkLoginCallbackGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ManageApi~manageLinkLoginCallbackGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageLinkLoginCallbackGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/LinkLoginCallback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageLinkLoginPost operation.
     * @callback module:api/ManageApi~manageLinkLoginPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.provider 
     * @param {module:api/ManageApi~manageLinkLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageLinkLoginPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'provider': opts['provider']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/LinkLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageRemoveLoginPost operation.
     * @callback module:api/ManageApi~manageRemoveLoginPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.loginProvider 
     * @param {String} opts.providerKey 
     * @param {module:api/ManageApi~manageRemoveLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageRemoveLoginPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'LoginProvider': opts['loginProvider'],
        'ProviderKey': opts['providerKey']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/RemoveLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageResetAuthenticatorPost operation.
     * @callback module:api/ManageApi~manageResetAuthenticatorPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ManageApi~manageResetAuthenticatorPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageResetAuthenticatorPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/ResetAuthenticator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageResetAuthenticatorWarningGet operation.
     * @callback module:api/ManageApi~manageResetAuthenticatorWarningGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ManageApi~manageResetAuthenticatorWarningGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageResetAuthenticatorWarningGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/ResetAuthenticatorWarning', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageSendVerificationEmailPost operation.
     * @callback module:api/ManageApi~manageSendVerificationEmailPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.username 
     * @param {Boolean} opts.isEmailConfirmed 
     * @param {String} opts.email 
     * @param {String} opts.phoneNumber 
     * @param {String} opts.statusMessage 
     * @param {module:api/ManageApi~manageSendVerificationEmailPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageSendVerificationEmailPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'Username': opts['username'],
        'IsEmailConfirmed': opts['isEmailConfirmed'],
        'Email': opts['email'],
        'PhoneNumber': opts['phoneNumber'],
        'StatusMessage': opts['statusMessage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/SendVerificationEmail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageSetPasswordGet operation.
     * @callback module:api/ManageApi~manageSetPasswordGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ManageApi~manageSetPasswordGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageSetPasswordGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/SetPassword', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageSetPasswordPost operation.
     * @callback module:api/ManageApi~manageSetPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.newPassword 
     * @param {String} opts.confirmPassword 
     * @param {String} opts.statusMessage 
     * @param {module:api/ManageApi~manageSetPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageSetPasswordPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'NewPassword': opts['newPassword'],
        'ConfirmPassword': opts['confirmPassword'],
        'StatusMessage': opts['statusMessage']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/SetPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the manageTwoFactorAuthenticationGet operation.
     * @callback module:api/ManageApi~manageTwoFactorAuthenticationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/ManageApi~manageTwoFactorAuthenticationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.manageTwoFactorAuthenticationGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Manage/TwoFactorAuthentication', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
