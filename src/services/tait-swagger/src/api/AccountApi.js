/**
 * Think About IT BC
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LoginViewModel'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/LoginViewModel'));
  } else {
    // Browser globals (root is window)
    if (!root.ThinkAboutItBc) {
      root.ThinkAboutItBc = {};
    }
    root.ThinkAboutItBc.AccountApi = factory(root.ThinkAboutItBc.ApiClient, root.ThinkAboutItBc.LoginViewModel);
  }
}(this, function(ApiClient, LoginViewModel) {
  'use strict';

  /**
   * Account service.
   * @module api/AccountApi
   * @version v1
   */

  /**
   * Constructs a new AccountApi. 
   * @alias module:api/AccountApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the accountAccessDeniedGet operation.
     * @callback module:api/AccountApi~accountAccessDeniedGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AccountApi~accountAccessDeniedGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountAccessDeniedGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/AccessDenied', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountConfirmEmailGet operation.
     * @callback module:api/AccountApi~accountConfirmEmailGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.userId 
     * @param {String} opts.code 
     * @param {module:api/AccountApi~accountConfirmEmailGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountConfirmEmailGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'userId': opts['userId'],
        'code': opts['code']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/ConfirmEmail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountExternalLoginCallbackGet operation.
     * @callback module:api/AccountApi~accountExternalLoginCallbackGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.returnUrl 
     * @param {String} opts.remoteError 
     * @param {module:api/AccountApi~accountExternalLoginCallbackGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountExternalLoginCallbackGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'returnUrl': opts['returnUrl'],
        'remoteError': opts['remoteError']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/ExternalLoginCallback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountExternalLoginConfirmationPost operation.
     * @callback module:api/AccountApi~accountExternalLoginConfirmationPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.email 
     * @param {String} opts.returnUrl 
     * @param {module:api/AccountApi~accountExternalLoginConfirmationPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountExternalLoginConfirmationPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'Email': opts['email'],
        'returnUrl': opts['returnUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/ExternalLoginConfirmation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountExternalLoginPost operation.
     * @callback module:api/AccountApi~accountExternalLoginPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.provider 
     * @param {String} opts.returnUrl 
     * @param {module:api/AccountApi~accountExternalLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountExternalLoginPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'provider': opts['provider'],
        'returnUrl': opts['returnUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/ExternalLogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountForgotPasswordConfirmationGet operation.
     * @callback module:api/AccountApi~accountForgotPasswordConfirmationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AccountApi~accountForgotPasswordConfirmationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountForgotPasswordConfirmationGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/ForgotPasswordConfirmation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountForgotPasswordGet operation.
     * @callback module:api/AccountApi~accountForgotPasswordGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AccountApi~accountForgotPasswordGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountForgotPasswordGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/ForgotPassword', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountForgotPasswordPost operation.
     * @callback module:api/AccountApi~accountForgotPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.email 
     * @param {module:api/AccountApi~accountForgotPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountForgotPasswordPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'Email': opts['email']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/ForgotPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountLockoutGet operation.
     * @callback module:api/AccountApi~accountLockoutGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AccountApi~accountLockoutGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountLockoutGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/Lockout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountLoginGet operation.
     * @callback module:api/AccountApi~accountLoginGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.returnUrl 
     * @param {module:api/AccountApi~accountLoginGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountLoginGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'returnUrl': opts['returnUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/Login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountLoginPost operation.
     * @callback module:api/AccountApi~accountLoginPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.email 
     * @param {String} opts.userName 
     * @param {String} opts.password 
     * @param {Boolean} opts.rememberMe 
     * @param {String} opts.returnUrl 
     * @param {module:api/AccountApi~accountLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountLoginPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'Email': opts['email'],
        'UserName': opts['userName'],
        'Password': opts['password'],
        'RememberMe': opts['rememberMe'],
        'returnUrl': opts['returnUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/Login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountLoginWith2faGet operation.
     * @callback module:api/AccountApi~accountLoginWith2faGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.rememberMe 
     * @param {String} opts.returnUrl 
     * @param {module:api/AccountApi~accountLoginWith2faGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountLoginWith2faGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'rememberMe': opts['rememberMe'],
        'returnUrl': opts['returnUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/LoginWith2fa', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountLoginWith2faPost operation.
     * @callback module:api/AccountApi~accountLoginWith2faPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.twoFactorCode 
     * @param {Boolean} opts.rememberMachine 
     * @param {Boolean} opts.rememberMe 
     * @param {Boolean} opts.rememberMe2 
     * @param {String} opts.returnUrl 
     * @param {module:api/AccountApi~accountLoginWith2faPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountLoginWith2faPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'TwoFactorCode': opts['twoFactorCode'],
        'RememberMachine': opts['rememberMachine'],
        'RememberMe': opts['rememberMe'],
        'rememberMe': opts['rememberMe2'],
        'returnUrl': opts['returnUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/LoginWith2fa', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountLoginWithRecoveryCodeGet operation.
     * @callback module:api/AccountApi~accountLoginWithRecoveryCodeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.returnUrl 
     * @param {module:api/AccountApi~accountLoginWithRecoveryCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountLoginWithRecoveryCodeGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'returnUrl': opts['returnUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/LoginWithRecoveryCode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountLoginWithRecoveryCodePost operation.
     * @callback module:api/AccountApi~accountLoginWithRecoveryCodePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.recoveryCode 
     * @param {String} opts.returnUrl 
     * @param {module:api/AccountApi~accountLoginWithRecoveryCodePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountLoginWithRecoveryCodePost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'RecoveryCode': opts['recoveryCode'],
        'returnUrl': opts['returnUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/LoginWithRecoveryCode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountLogoutPost operation.
     * @callback module:api/AccountApi~accountLogoutPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AccountApi~accountLogoutPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountLogoutPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/Logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountRegisterGet operation.
     * @callback module:api/AccountApi~accountRegisterGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.returnUrl 
     * @param {module:api/AccountApi~accountRegisterGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountRegisterGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'returnUrl': opts['returnUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/Register', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountRegisterPost operation.
     * @callback module:api/AccountApi~accountRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.email 
     * @param {String} opts.password 
     * @param {String} opts.confirmPassword 
     * @param {String} opts.returnUrl 
     * @param {module:api/AccountApi~accountRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountRegisterPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'Email': opts['email'],
        'Password': opts['password'],
        'ConfirmPassword': opts['confirmPassword'],
        'returnUrl': opts['returnUrl']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/Register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountResetPasswordConfirmationGet operation.
     * @callback module:api/AccountApi~accountResetPasswordConfirmationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AccountApi~accountResetPasswordConfirmationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountResetPasswordConfirmationGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/ResetPasswordConfirmation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountResetPasswordGet operation.
     * @callback module:api/AccountApi~accountResetPasswordGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.code 
     * @param {module:api/AccountApi~accountResetPasswordGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountResetPasswordGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'code': opts['code']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/ResetPassword', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the accountResetPasswordPost operation.
     * @callback module:api/AccountApi~accountResetPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.email 
     * @param {String} opts.password 
     * @param {String} opts.confirmPassword 
     * @param {String} opts.code 
     * @param {module:api/AccountApi~accountResetPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.accountResetPasswordPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'Email': opts['email'],
        'Password': opts['password'],
        'ConfirmPassword': opts['confirmPassword'],
        'Code': opts['code']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/Account/ResetPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiRegisterPost operation.
     * @callback module:api/AccountApi~apiRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginViewModel} opts.lmv 
     * @param {module:api/AccountApi~apiRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiRegisterPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['lmv'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
