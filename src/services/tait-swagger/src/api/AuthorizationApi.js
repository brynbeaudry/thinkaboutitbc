/**
 * Think About IT BC
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ThinkAboutItBc) {
      root.ThinkAboutItBc = {};
    }
    root.ThinkAboutItBc.AuthorizationApi = factory(root.ThinkAboutItBc.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Authorization service.
   * @module api/AuthorizationApi
   * @version v1
   */

  /**
   * Constructs a new AuthorizationApi. 
   * @alias module:api/AuthorizationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the apiUserinfoGet operation.
     * @callback module:api/AuthorizationApi~apiUserinfoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AuthorizationApi~apiUserinfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiUserinfoGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/userinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectAuthorizeGet operation.
     * @callback module:api/AuthorizationApi~connectAuthorizeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessToken 
     * @param {String} opts.acrValues 
     * @param {String} opts.assertion 
     * @param {Object.<String, {String: String}>} opts.claims 
     * @param {String} opts.claimsLocales 
     * @param {String} opts.clientAssertion 
     * @param {String} opts.clientAssertionType 
     * @param {String} opts.clientId 
     * @param {String} opts.clientSecret 
     * @param {String} opts.code 
     * @param {String} opts.codeChallenge 
     * @param {String} opts.codeChallengeMethod 
     * @param {String} opts.codeVerifier 
     * @param {String} opts.display 
     * @param {String} opts.grantType 
     * @param {String} opts.identityProvider 
     * @param {String} opts.idTokenHint 
     * @param {String} opts.loginHint 
     * @param {Number} opts.maxAge 
     * @param {String} opts.nonce 
     * @param {String} opts.password 
     * @param {String} opts.postLogoutRedirectUri 
     * @param {String} opts.prompt 
     * @param {String} opts.redirectUri 
     * @param {String} opts.refreshToken 
     * @param {String} opts.request 
     * @param {String} opts.requestId 
     * @param {String} opts.requestUri 
     * @param {String} opts.resource 
     * @param {String} opts.responseMode 
     * @param {String} opts.responseType 
     * @param {String} opts.scope 
     * @param {String} opts.state 
     * @param {String} opts.token 
     * @param {String} opts.tokenTypeHint 
     * @param {Object.<String, {String: String}>} opts.registration 
     * @param {String} opts.uiLocales 
     * @param {String} opts.username 
     * @param {module:api/AuthorizationApi~connectAuthorizeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.connectAuthorizeGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'AccessToken': opts['accessToken'],
        'AcrValues': opts['acrValues'],
        'Assertion': opts['assertion'],
        'Claims': opts['claims'],
        'ClaimsLocales': opts['claimsLocales'],
        'ClientAssertion': opts['clientAssertion'],
        'ClientAssertionType': opts['clientAssertionType'],
        'ClientId': opts['clientId'],
        'ClientSecret': opts['clientSecret'],
        'Code': opts['code'],
        'CodeChallenge': opts['codeChallenge'],
        'CodeChallengeMethod': opts['codeChallengeMethod'],
        'CodeVerifier': opts['codeVerifier'],
        'Display': opts['display'],
        'GrantType': opts['grantType'],
        'IdentityProvider': opts['identityProvider'],
        'IdTokenHint': opts['idTokenHint'],
        'LoginHint': opts['loginHint'],
        'MaxAge': opts['maxAge'],
        'Nonce': opts['nonce'],
        'Password': opts['password'],
        'PostLogoutRedirectUri': opts['postLogoutRedirectUri'],
        'Prompt': opts['prompt'],
        'RedirectUri': opts['redirectUri'],
        'RefreshToken': opts['refreshToken'],
        'Request': opts['request'],
        'RequestId': opts['requestId'],
        'RequestUri': opts['requestUri'],
        'Resource': opts['resource'],
        'ResponseMode': opts['responseMode'],
        'ResponseType': opts['responseType'],
        'Scope': opts['scope'],
        'State': opts['state'],
        'Token': opts['token'],
        'TokenTypeHint': opts['tokenTypeHint'],
        'Registration': opts['registration'],
        'UiLocales': opts['uiLocales'],
        'Username': opts['username']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/connect/authorize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectAuthorizePost operation.
     * @callback module:api/AuthorizationApi~connectAuthorizePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessToken 
     * @param {String} opts.acrValues 
     * @param {String} opts.assertion 
     * @param {Object.<String, {String: String}>} opts.claims 
     * @param {String} opts.claimsLocales 
     * @param {String} opts.clientAssertion 
     * @param {String} opts.clientAssertionType 
     * @param {String} opts.clientId 
     * @param {String} opts.clientSecret 
     * @param {String} opts.code 
     * @param {String} opts.codeChallenge 
     * @param {String} opts.codeChallengeMethod 
     * @param {String} opts.codeVerifier 
     * @param {String} opts.display 
     * @param {String} opts.grantType 
     * @param {String} opts.identityProvider 
     * @param {String} opts.idTokenHint 
     * @param {String} opts.loginHint 
     * @param {Number} opts.maxAge 
     * @param {String} opts.nonce 
     * @param {String} opts.password 
     * @param {String} opts.postLogoutRedirectUri 
     * @param {String} opts.prompt 
     * @param {String} opts.redirectUri 
     * @param {String} opts.refreshToken 
     * @param {String} opts.request 
     * @param {String} opts.requestId 
     * @param {String} opts.requestUri 
     * @param {String} opts.resource 
     * @param {String} opts.responseMode 
     * @param {String} opts.responseType 
     * @param {String} opts.scope 
     * @param {String} opts.state 
     * @param {String} opts.token 
     * @param {String} opts.tokenTypeHint 
     * @param {Object.<String, {String: String}>} opts.registration 
     * @param {String} opts.uiLocales 
     * @param {String} opts.username 
     * @param {module:api/AuthorizationApi~connectAuthorizePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.connectAuthorizePost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'AccessToken': opts['accessToken'],
        'AcrValues': opts['acrValues'],
        'Assertion': opts['assertion'],
        'Claims': opts['claims'],
        'ClaimsLocales': opts['claimsLocales'],
        'ClientAssertion': opts['clientAssertion'],
        'ClientAssertionType': opts['clientAssertionType'],
        'ClientId': opts['clientId'],
        'ClientSecret': opts['clientSecret'],
        'Code': opts['code'],
        'CodeChallenge': opts['codeChallenge'],
        'CodeChallengeMethod': opts['codeChallengeMethod'],
        'CodeVerifier': opts['codeVerifier'],
        'Display': opts['display'],
        'GrantType': opts['grantType'],
        'IdentityProvider': opts['identityProvider'],
        'IdTokenHint': opts['idTokenHint'],
        'LoginHint': opts['loginHint'],
        'MaxAge': opts['maxAge'],
        'Nonce': opts['nonce'],
        'Password': opts['password'],
        'PostLogoutRedirectUri': opts['postLogoutRedirectUri'],
        'Prompt': opts['prompt'],
        'RedirectUri': opts['redirectUri'],
        'RefreshToken': opts['refreshToken'],
        'Request': opts['request'],
        'RequestId': opts['requestId'],
        'RequestUri': opts['requestUri'],
        'Resource': opts['resource'],
        'ResponseMode': opts['responseMode'],
        'ResponseType': opts['responseType'],
        'Scope': opts['scope'],
        'State': opts['state'],
        'Token': opts['token'],
        'TokenTypeHint': opts['tokenTypeHint'],
        'Registration': opts['registration'],
        'UiLocales': opts['uiLocales'],
        'Username': opts['username']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/connect/authorize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectLogoutPost operation.
     * @callback module:api/AuthorizationApi~connectLogoutPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AuthorizationApi~connectLogoutPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.connectLogoutPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/connect/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the connectTokenPost operation.
     * @callback module:api/AuthorizationApi~connectTokenPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.accessToken 
     * @param {String} opts.acrValues 
     * @param {String} opts.assertion 
     * @param {Object.<String, {String: String}>} opts.claims 
     * @param {String} opts.claimsLocales 
     * @param {String} opts.clientAssertion 
     * @param {String} opts.clientAssertionType 
     * @param {String} opts.clientId 
     * @param {String} opts.clientSecret 
     * @param {String} opts.code 
     * @param {String} opts.codeChallenge 
     * @param {String} opts.codeChallengeMethod 
     * @param {String} opts.codeVerifier 
     * @param {String} opts.display 
     * @param {String} opts.grantType 
     * @param {String} opts.identityProvider 
     * @param {String} opts.idTokenHint 
     * @param {String} opts.loginHint 
     * @param {Number} opts.maxAge 
     * @param {String} opts.nonce 
     * @param {String} opts.password 
     * @param {String} opts.postLogoutRedirectUri 
     * @param {String} opts.prompt 
     * @param {String} opts.redirectUri 
     * @param {String} opts.refreshToken 
     * @param {String} opts.request 
     * @param {String} opts.requestId 
     * @param {String} opts.requestUri 
     * @param {String} opts.resource 
     * @param {String} opts.responseMode 
     * @param {String} opts.responseType 
     * @param {String} opts.scope 
     * @param {String} opts.state 
     * @param {String} opts.token 
     * @param {String} opts.tokenTypeHint 
     * @param {Object.<String, {String: String}>} opts.registration 
     * @param {String} opts.uiLocales 
     * @param {String} opts.username 
     * @param {module:api/AuthorizationApi~connectTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.connectTokenPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'AccessToken': opts['accessToken'],
        'AcrValues': opts['acrValues'],
        'Assertion': opts['assertion'],
        'Claims': opts['claims'],
        'ClaimsLocales': opts['claimsLocales'],
        'ClientAssertion': opts['clientAssertion'],
        'ClientAssertionType': opts['clientAssertionType'],
        'ClientId': opts['clientId'],
        'ClientSecret': opts['clientSecret'],
        'Code': opts['code'],
        'CodeChallenge': opts['codeChallenge'],
        'CodeChallengeMethod': opts['codeChallengeMethod'],
        'CodeVerifier': opts['codeVerifier'],
        'Display': opts['display'],
        'GrantType': opts['grantType'],
        'IdentityProvider': opts['identityProvider'],
        'IdTokenHint': opts['idTokenHint'],
        'LoginHint': opts['loginHint'],
        'MaxAge': opts['maxAge'],
        'Nonce': opts['nonce'],
        'Password': opts['password'],
        'PostLogoutRedirectUri': opts['postLogoutRedirectUri'],
        'Prompt': opts['prompt'],
        'RedirectUri': opts['redirectUri'],
        'RefreshToken': opts['refreshToken'],
        'Request': opts['request'],
        'RequestId': opts['requestId'],
        'RequestUri': opts['requestUri'],
        'Resource': opts['resource'],
        'ResponseMode': opts['responseMode'],
        'ResponseType': opts['responseType'],
        'Scope': opts['scope'],
        'State': opts['state'],
        'Token': opts['token'],
        'TokenTypeHint': opts['tokenTypeHint'],
        'Registration': opts['registration'],
        'UiLocales': opts['uiLocales'],
        'Username': opts['username']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/connect/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
