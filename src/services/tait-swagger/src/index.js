/**
 * Think About IT BC
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApplicationUser', 'model/Comment', 'model/Image', 'model/LoginViewModel', 'model/Post', 'api/AccountApi', 'api/AuthorizationApi', 'api/CommentsApi', 'api/ManageApi', 'api/PostsApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/ApplicationUser'), require('./model/Comment'), require('./model/Image'), require('./model/LoginViewModel'), require('./model/Post'), require('./api/AccountApi'), require('./api/AuthorizationApi'), require('./api/CommentsApi'), require('./api/ManageApi'), require('./api/PostsApi'));
  }
}(function(ApiClient, ApplicationUser, Comment, Image, LoginViewModel, Post, AccountApi, AuthorizationApi, CommentsApi, ManageApi, PostsApi) {
  'use strict';

  /**
   * ERROR_UNKNOWN.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var ThinkAboutItBc = require('index'); // See note below*.
   * var xxxSvc = new ThinkAboutItBc.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new ThinkAboutItBc.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new ThinkAboutItBc.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new ThinkAboutItBc.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version v1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ApplicationUser model constructor.
     * @property {module:model/ApplicationUser}
     */
    ApplicationUser: ApplicationUser,
    /**
     * The Comment model constructor.
     * @property {module:model/Comment}
     */
    Comment: Comment,
    /**
     * The Image model constructor.
     * @property {module:model/Image}
     */
    Image: Image,
    /**
     * The LoginViewModel model constructor.
     * @property {module:model/LoginViewModel}
     */
    LoginViewModel: LoginViewModel,
    /**
     * The Post model constructor.
     * @property {module:model/Post}
     */
    Post: Post,
    /**
     * The AccountApi service constructor.
     * @property {module:api/AccountApi}
     */
    AccountApi: AccountApi,
    /**
     * The AuthorizationApi service constructor.
     * @property {module:api/AuthorizationApi}
     */
    AuthorizationApi: AuthorizationApi,
    /**
     * The CommentsApi service constructor.
     * @property {module:api/CommentsApi}
     */
    CommentsApi: CommentsApi,
    /**
     * The ManageApi service constructor.
     * @property {module:api/ManageApi}
     */
    ManageApi: ManageApi,
    /**
     * The PostsApi service constructor.
     * @property {module:api/PostsApi}
     */
    PostsApi: PostsApi
  };

  return exports;
}));
